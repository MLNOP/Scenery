@use 'sass:color';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

// Get variables from object
@function variable-get($group-name, $variable-name) {
	@if map.has-key($group-name, $variable-name) {
		@return map.get($group-name, $variable-name);
	} @else {
		@warn 'Unfortunately, no value could be retrieved from `#{$variable-name}`. ' + 'Please make sure it is defined in `#{$group-name}` map.';
		@return null;
	}
}

@function toRGB($color) {
	@return color.channel($color, 'red', $space: rgb) + ', ' + color.channel($color, 'green', $space: rgb) + ', ' + color.channel($color, 'blue', $space: rgb);
}

@function get-unit($value) {
	@return string.slice($value * 0 + '', 2, -1);
}

@function strip-unit($number) {
	@if meta.type-of($number) == 'number' and not math.is-unitless($number) {
		$temp: $number * 0 + 1;
		@return calc($number / ($temp));
	}

	@return $number;
}

@function calculateRem($size) {
	@return calc(($size / 16) * 1rem);
}

@function min-max-interpolation($min-value, $max-value, $min-breakpoint, $max-breakpoint) {
	// Convert en rem si la valeur est en pixels
	@if get-unit($min-value) == 'px' {
		$min-value: calculateRem(strip-unit($min-value));
	}
	// Convert en rem si la valeur n'a pas d'unitÃ©
	@if math.is-unitless($min-value) {
		$min-value: calculateRem($min-value);
	}

	@if get-unit($max-value) == 'px' {
		$max-value: calculateRem(strip-unit($max-value));
	}
	@if math.is-unitless($max-value) {
		$max-value: calculateRem($max-value);
	}

	@if get-unit($min-breakpoint) == 'px' {
		$min-breakpoint: calculateRem(strip-unit($min-breakpoint));
	}
	@if math.is-unitless($min-breakpoint) {
		$min-breakpoint: calculateRem($min-breakpoint);
	}

	@if get-unit($max-breakpoint) == 'px' {
		$max-breakpoint: calculateRem(strip-unit($max-breakpoint));
	}
	@if math.is-unitless($max-breakpoint) {
		$max-breakpoint: calculateRem($max-breakpoint);
	}

	$factor: calc(1 / ($max-breakpoint - $min-breakpoint) * ($max-value - $min-value));
	$calc-value: string.unquote('#{$min-value - ($min-breakpoint * $factor)} + #{100vw * $factor}');
	@return clamp(#{if($min-value > $max-value, $max-value, $min-value)}, #{$calc-value}, #{if($min-value > $max-value, $min-value, $max-value)});
}
